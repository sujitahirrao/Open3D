// ----------------------------------------------------------------------------
// -                        Open3D: www.open3d.org                            -
// ----------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2018-2021 www.open3d.org
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------------------------------------------------------

// To generate plugin_data_pb2.py, use this command:
// protoc -I=. --python_out=. plugin_data.proto
// and use make apply-style to correct formatting.

syntax = "proto3";

package tensorboard.open3d;

// A Open3DPluginData encapsulates information on which plugins are able to make
// use of a certain summary value.
message Open3DPluginData {

  // Version 14 is the only supported version.
  int32 version = 1;

  enum GeometryProperty {
    vertex_positions = 0;
    vertex_normals = 1;
    vertex_colors = 2;
    vertex_texture_uvs = 3;
    triangle_indices = 4;
    triangle_colors = 5;
    triangle_normals = 6;
    line_indices = 7;
    line_colors = 8;
}

// Pick up the tensor for a property (geometry_property) from a previous step (step_ref)
  message PropertyReference {
      GeometryProperty geometry_property = 1;
      uint64 step_ref = 2;
  }

// Data start and data size for a single geometry msgpack
  message StartSize {
      uint64 start = 1;
      uint64 size = 2;
      uint32 masked_crc32c = 3;
  }

// Index for a batch of geometry data
  message BatchIndex {
      string filename = 1;
      repeated StartSize start_size = 2;
  }

  repeated PropertyReference property_references = 2;
  BatchIndex batch_index = 3;
}
