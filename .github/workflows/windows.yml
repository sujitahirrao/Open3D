name: Windows CI

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release wheels'
        required: false
        default: 'ON'

  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]    # Rebuild on new pushes to PR

env:
  PIP_VER: "20.2.4"
  WHEEL_VER: "0.35.1"
  STOOLS_VER: "50.3.2"
  PYTEST_VER: "6.0.1"
  SCIPY_VER: "1.4.1"
  NPROC: 2
  CONDA_BUILD_VER: "3.20.0"

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        SHARED: [ON, OFF]
        STATIC_RUNTIME: [ON, OFF]
        CONFIG: [Release, Debug]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Config
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=${{ matrix.SHARED }} -DSTATIC_WINDOWS_RUNTIME=${{ matrix.STATIC_RUNTIME }} ..
      - name: Build
        run: |
          cd build
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} --target INSTALL
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} --target build-examples-iteratively
      - name: Linking to Open3D
        run: |
          cd docs\_static\C++
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DSTATIC_WINDOWS_RUNTIME=${{ matrix.STATIC_RUNTIME }} ..
          cmake --build . --config ${{ matrix.CONFIG }} && .\${{ matrix.CONFIG }}\TestVisualizer.exe
      - name: Install Python package
        run: |
          python -m pip install --upgrade pip==${{ env.PIP_VER }} wheel==${{ env.WHEEL_VER }} setuptools==${{ env.STOOLS_VER }}
          cd build
          cmake --build . --config ${{ matrix.CONFIG }} --target install-pip-package
      - name: Import python package
        # If SHARED == ON, Open3D.dll needs to be copied, which is not recommended for python.
        if: ${{ matrix.SHARED == 'OFF' }}
        run: |
          python -c "import open3d; print('Imported:', open3d)"
          python -c "import open3d; print('CUDA enabled: ', open3d.core.cuda.is_available())"
      - name: Disk space used
        run: Get-PSDrive (get-location).Drive

  build-wheel:
    name: Build wheel
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.6, 3.7, 3.8]
    env:
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v1
        with:
          auto-update-conda: false
          python-version: ${{ matrix.python_version }}

      - name: Config
        shell: pwsh
        run: |
          mkdir build
          cd build
          if (${env:DEVELOPER_BUILD} -ne "OFF") {
            ${env:DEVELOPER_BUILD}="ON"
          }
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=OFF -DSTATIC_WINDOWS_RUNTIME=ON -DDEVELOPER_BUILD="${env:DEVELOPER_BUILD}" ..

      - name: Build Python package
        shell: pwsh
        run: |
          python -m pip install --upgrade pip==${{ env.PIP_VER }} wheel==${{ env.WHEEL_VER }} setuptools==${{ env.STOOLS_VER }}
          cd build
          conda install conda-build=${{ env.CONDA_BUILD_VER }} -y
          conda-build --version
          cmake --build . --parallel ${{ env.NPROC }} --config Release --target pip-conda-package
          $PIP_PKG_NAME=(Get-ChildItem lib/python_package/pip_package/open3d*.whl).Name
          echo "PIP_PKG_NAME=$PIP_PKG_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $CONDA_PKG_NAME=(Get-ChildItem lib/python_package/conda_package/win-64/open3d*.tar.bz2).Name
          echo "CONDA_PKG_NAME=$CONDA_PKG_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $PYTHON_EXECUTABLE=(python -c "import sys; print(sys.executable)")
          echo $PYTHON_EXECUTABLE
          echo "PYTHON_EXECUTABLE=$PYTHON_EXECUTABLE"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: open3d_win_amd64_wheels
          path: |
            build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
            build/lib/python_package/conda_package/win-64/${{ env.CONDA_PKG_NAME }}
          if-no-files-found: error

      - name: GCloud CLI setup
        if: ${{ github.ref == 'refs/heads/master' }}
        # https://github.com/GoogleCloudPlatform/github-actions/issues/100#issuecomment-650798308
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        env:
          CLOUDSDK_PYTHON: ${{env.PYTHON_EXECUTABLE}}
        with:
          version: ${{ env.GCE_CLI_GHA_VERSION }}
          service_account_key: ${{ secrets.GCE_SA_KEY_GPU_CI }}
          project_id: ${{ secrets.GCE_DOCS_PROJECT }}
          export_default_credentials: true

      - name: Upload wheel to GCS bucket
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          python_version: ${{ matrix.python_version }}
          CLOUDSDK_PYTHON: ${{env.PYTHON_EXECUTABLE}}
        run: |
          $PYTAG="-cp$(${{ env.python_version }} -replace '\.', '')"
          gsutil cp build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }} gs://open3d-releases-master/python-wheels/
          if ($LastExitCode -eq 0) {
            echo "Download pip package at: https://storage.googleapis.com/open3d-releases-master/python-wheels/${{ env.PIP_PKG_NAME }}"
          } else {
            throw "Wheel upload failed"
          }
          gsutil cp build/lib/python_package/conda_package/win-64/${{ env.CONDA_PKG_NAME }} gs://open3d-releases-master/conda_package/win-64/
          if ($LastExitCode -eq 0) {
            echo "Download conda package at: https://storage.googleapis.com/open3d-releases-master/conda_package/win-64/${{ env.CONDA_PKG_NAME }}"
          } else {
            throw "Wheel upload failed"
          }

  test-wheel:
    name: Test wheel
    runs-on: windows-latest
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Download wheels
        uses: actions/download-artifact@v2
        # See https://github.com/dawidd6/action-download-artifact for more
        # flexible artifact download options
        with:
          name: open3d_win_amd64_wheels

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Test Python package
        run: |
          python -V
          python -m venv open3d_test_venv
          open3d_test_venv\Scripts\Activate.ps1

          python -m pip install --upgrade pip==${{ env.PIP_VER }} wheel==${{ env.WHEEL_VER }} setuptools==${{ env.STOOLS_VER }}
          python -m pip install -U pytest==${{ env.PYTEST_VER }}
          python -m pip install -U scipy==${{ env.SCIPY_VER }}
          $pi_tag=(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          $PIP_PKG_NAME=(Get-ChildItem pip_package\open3d*-$pi_tag-*.whl).Name
          echo "Installing Open3D wheel pip_package\$PIP_PKG_NAME in virtual environment..."
          python -m pip install "pip_package\$PIP_PKG_NAME"
          python -c "import open3d; print('Imported:', open3d)"
          python -c "import open3d; print('CUDA enabled: ', open3d.core.cuda.is_available())"

          deactivate

      - name: Run Python unit tests (benchmarks)
        run: |
          open3d_test_venv\Scripts\Activate.ps1
          echo "Running Open3D python tests..."
          echo "Testing ML and ML Ops disabled"
          python -m pytest python/test/ --ignore python/test/ml_ops/
          deactivate
